package lift;

/**
 * @author dat12nka
 * 
 */
public class Monitor {

	private int here, next;
	private int[] waitEntry;
	private int[] waitExit;
	private int load;
	private LiftView lv;

	/**
	 * @param lv
	 *            , LiftView
	 */
	public Monitor(LiftView lv) {
		here = 0;
		next = 0;
		waitEntry = new int[7];
		waitExit = new int[7];
		load = 0;
		this.lv = lv;

	}

	/**
	 * Notifies the monitor that a person has entered the floor determined by
	 * floor.
	 * 
	 * @param floor
	 *            , the current floor of the person.
	 */
	private void enterFloor(int floor) {
		waitEntry[floor]++;
		lv.drawLevel(floor, waitEntry[floor]);
	}

	/**
	 * Determines whether a person may enter the elevator or not.
	 * 
	 * @param floor
	 * @return true if a person may enter the elevator. False if not.
	 */
	private boolean canEnter(int floor) {
		return load < 4 && next == here && floor == here;
	}

	/**
	 * Handles a persons actions from the point of arriving at a floor until
	 * exiting the elevator.
	 * 
	 * @param nextFloor
	 *            , the target floor of the person.
	 * @param currentFloor
	 *            , the current floor of the person.
	 */

	synchronized public void liftAction(int nextFloor, int currentFloor) {
		enterFloor(currentFloor);
		while (!canEnter(currentFloor)) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		load++;
		waitEntry[here]--;
		waitExit[nextFloor]++;
		lv.drawLevel(here, waitEntry[here]);
		lv.drawLift(here, load);
		notifyAll();
		while (here != nextFloor) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		exitLift();
	}

	/**
	 * Removes a person from the elevator.
	 */
	private void exitLift() {
		waitExit[here]--;
		load--;
		lv.drawLift(here, load);
		notifyAll();
	}

	// Gets the next floor to go to and starts riding there
	/**
	 * Moves the elevator to the floor given in next.
	 * 
	 * @param next
	 *            , the upcoming floor of the elevator.
	 */
	synchronized public void moveLift(int next) {
		here = this.next;
		notifyAll();
		while (waitExit[here] > 0 || (waitEntry[here] > 0 && load < 4)) {
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		this.next = next;
		notifyAll();
	}
}
